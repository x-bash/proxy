# shellcheck shell=sh disable=SC3043

xrc subcmd
xrc param

proxy(){

    param <<A
--help      -h      =FLAG
--version   -v      =FLAG
A

    if [ "$help" ]; then
        proxy_subcmd help
        return
    fi

    if [ "$version" ]; then
        proxy_subcmd version
        return
    fi

    proxy_subcmd ${1:+"$@"}
}

proxy_version(){
    printf "%s" v0
}

subcmd proxy "
Subcommand:
    :brew|homebrew          Setting the brew mirros
    :pip|python|py          Setting the pip mirrors
    :npm|nodejs|node        Setting the npm mirrors
    :yum                    Setting the yum mirrors
    :maven|java             Setting the maven mirrors
    :sdkman|sdk             Setting the sdkman mirrors
    :version|v              Print out the command version
    :go                     Setting the go mirrorss
    :set                    Setting the proxy in the shell environment
    :unset|reset            Reset the proxy in the shell environment

"

eval "$(
    for i in brew npm pip yum maven sdkman go; do
        cat <<A

proxy_$i(){
    if xrc proxy/$i/v0; then
        proxy_$i \${1:+"\$@"}
    else
        echo "Autoloading failure." >&2
        return 1
    fi
}
A
    done
)"

proxy_set(){
    local proxy="${1:?
        Provide proxy address like 
            'https://<address>[:<port>]' or 
            'http://<address>[:<port>]' or 
            'socks5://<address>[:<port>]'
        }"

    case $proxy in
        https://|http://|socks*://)     ;;
        *)          
            printf "%s" "Considered as http://$proxy"
            ;;
    esac

    export http_proxy="$proxy"
    export HTTP_PROXY="$proxy"
    export https_proxy="$proxy"
    export HTTPS_PROXY="$proxy"
    export ftp_proxy="$proxy"
    export FTP_PROXY="$proxy"
    export ALL_PROXY="$proxy"
}

proxy_unset(){
    export http_proxy=
    export HTTP_PROXY=
    export https_proxy=
    export HTTPS_PROXY=
    export ftp_proxy=
    export FTP_PROXY=
    export ALL_PROXY=
}

